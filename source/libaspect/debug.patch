diff -r 4132acb8993e src/dwarf2-info.c
--- a/src/dwarf2-info.c	Mon Aug 02 10:43:47 2010 +0200
+++ b/src/dwarf2-info.c	Mon Aug 02 10:44:03 2010 +0200
@@ -129,6 +129,95 @@
         }
         return offset;
 }
+
+static uint64_t 
+read_form (struct dwarf2_info_cuh *header,
+           uint32_t form, struct reader *reader)
+{
+        uint64_t retval;
+        switch (form) {
+        case DW_FORM_BLOCK: {
+                uint64_t length;
+                length = reader_read_uleb128 (reader);
+                reader_skip64 (reader, length);
+        } break;
+        case DW_FORM_BLOCK1: {
+                uint8_t length;
+                length = reader_read_u8 (reader);
+                reader_skip (reader, length);
+        } break;
+        case DW_FORM_BLOCK2:{
+                uint16_t length;
+                length = reader_read_u16 (reader);
+                reader_skip (reader, length);
+        } break;
+        case DW_FORM_BLOCK4:{
+                uint32_t length;
+                length = reader_read_u32 (reader);
+                reader_skip (reader, length);
+        } break;
+        switch (form) {
+        case DW_FORM_DATA1:
+                retval = reader_read_u8 (reader);
+                break;
+        case DW_FORM_DATA2:
+                retval = reader_read_u16 (reader);
+                break;
+        case DW_FORM_DATA4:
+                retval = reader_read_u32 (reader);
+                break;
+        case DW_FORM_DATA8:
+                retval = reader_read_u64 (reader);
+                break;
+        case DW_FORM_SDATA:
+                retval = reader_read_sleb128 (reader);
+                break;
+        case DW_FORM_UDATA:
+                retval = reader_read_uleb128 (reader);
+                break;
+        case DW_FORM_STRP:
+                reader_skip (reader, 4);
+                break;
+        case DW_FORM_STRING: {
+                uint8_t c;
+                do {
+                        c = reader_read_u8 (reader);
+                } while (c != 0);
+        } break;
+        case DW_FORM_FLAG:
+                retval = reader_read_u8 (reader);
+                break;
+        case DW_FORM_ADDR:
+                retval = reader_read_u (reader, header->address_size);
+                break;
+        case DW_FORM_REF_ADDR:
+                retval = header->info_start;
+                retval += reader_read_u (reader, header->address_size);
+                break;
+        case DW_FORM_REF1:
+                retval = header->start;
+                retval += reader_read_u8 (reader);
+                break;
+        case DW_FORM_REF2:
+                retval = header->start;
+                retval += reader_read_u16 (reader);
+                break;
+        case DW_FORM_REF4:
+                retval = header->start;
+                retval += reader_read_u32 (reader);
+                break;
+        case DW_FORM_REF8:
+                retval = header->start;
+                retval += reader_read_u64 (reader);
+                break;
+        case DW_FORM_REF_UDATA:
+                retval = reader_read_uleb128 (reader);
+                break;
+        case DW_FORM_INDIRECT:
+                assert (false);
+                break;
+        }
+}
         
 
 static void
@@ -225,9 +314,6 @@
         uint64_t form = attr->form;
         uint64_t name = attr->name;
 
-        if (form == DW_FORM_INDIRECT) {
-                form = reader_read_uleb128 (reader);
-        }
         switch (name) {
         case DW_AT_STMT_LIST:
                 /* see section 3.1 dwarf 2.0.0 p23 */
@@ -259,6 +345,9 @@
                 entry->used |= DW2_INFO_ATTR_ABSTRACT_ORIGIN;
                 entry->abstract_origin = read_ref_form (cuh, form, reader);
                 break;
+        case DW_AT_SIBLING:
+                entry->used |= DW2_INFO_ATTR_SIBLING;
+                entry->sibling = read_ref_form (cuh, form, reader);
         default:
                 /* uninteresting for now. */
                 assert (form != DW_FORM_INDIRECT);
@@ -299,16 +388,18 @@
         info->abbrev_end = abbrev_end;
 }
 
-static void
+static uint64_t
 entry_read (struct dwarf2_info_cuh *cuh,
-            struct dwarf2_info_entry *entry, 
-            uint64_t current, uint64_t *next, struct reader *reader1, struct reader *reader2)
+            uint64_t current, 
+            struct dwarf2_info_iterator *iterator,
+            struct reader *reader1, struct reader *reader2)
 {
+        DwarfInfoAttributeIterator attr_iterator;
         uint64_t abbr_code;
+        uint64_t name, form;
         struct dwarf2_abbrev_decl decl;
         struct dwarf2_abbrev_attr attr;
         uint32_t attr_offset;
-        entry->used = 0;
         reader_seek (reader1, current);
         abbr_code = reader_read_uleb128 (reader1);
         // search the abbr_code in the abbrev table.
@@ -317,16 +408,21 @@
         // update the entry with the relevant info (just in case)
         entry->tag = decl.tag;
         entry->children = decl.children;
+        attr_iterator = iterator->start_entry (i, cuh, decl.tag, decl.children == 1, current);
         
         // now, parse together both the attribute description in the abbrev
         // table and the attribute data in the info table.
         reader_seek (reader2, decl.offset);
-        attr.name = reader_read_uleb128 (reader2);
-        attr.form = reader_read_uleb128 (reader2);
-        while (attr.name != 0) {
+        name = reader_read_uleb128 (reader2);
+        form = reader_read_uleb128 (reader2);
+        while (name != 0) {
+                if (form == DW_FORM_INDIRECT) {
+                        form = reader_read_uleb128 (reader1);
+                }
+
                 attr_read_entry (cuh, &attr, entry, reader1);
-                attr.name = reader_read_uleb128 (reader2);
-                attr.form = reader_read_uleb128 (reader2);
+                name = reader_read_uleb128 (reader2);
+                form = reader_read_uleb128 (reader2);
         }
         *next = reader_get_offset (reader1);
 }
@@ -352,14 +448,13 @@
 
                 current = cuh.start + 4 + 2 + 4 + 1;
                 while (current != (cuh.start + cuh.length + 4)) {
-                        struct dwarf2_info_entry entry;
-                        uint64_t tmp;
                         
-                        entry_read (&cuh, &entry, current, &tmp, reader1, reader2);
+                        current = entry_read (&cuh, current, iterator, reader1, reader2);
                         
-                        iterator->entry (iterator, &cuh, &entry, 0, entry.children == 1);
+                        action = iterator->start_entry (iterator, &cuh, &entry, 0, entry.children == 1);
+
                         reader_seek (reader1, tmp);
-
+                        
                         if (!entry.children) {
                                 // ok, next entry will not be a child.
                                 // maybe the next entry will not be a sibbling either
@@ -370,7 +465,7 @@
                                                 reader_seek (reader1, current-1);
                                                 break;
                                         }
-                                        // we going back one level for next entry.
+                                        // we are going back one level for next entry.
                                         iterator->end_children (iterator, &cuh);
                                 }
                         }
diff -r 4132acb8993e src/dwarf2-info.h
--- a/src/dwarf2-info.h	Mon Aug 02 10:43:47 2010 +0200
+++ b/src/dwarf2-info.h	Mon Aug 02 10:44:03 2010 +0200
@@ -61,29 +61,35 @@
         DW2_INFO_ATTR_ABSTRACT_ORIGIN = (1<<4),
         DW2_INFO_ATTR_SPECIFICATION = (1<<5),
         DW2_INFO_ATTR_COMP_DIRNAME_OFFSET = (1<<6),
+        DW2_INFO_ATTR_SIBLING = (1<<7),
 };
 
 struct dwarf2_info_entry {
         uint64_t tag;
         uint8_t children;      /* 1 if this entry has children, 0 otherwise. */
-        int used;              /* bitfield which specifies which fields below are valid. */
-        uint32_t stmt_list;
-        uint32_t name_offset;
-        uint32_t comp_dirname_offset;
-        uint64_t high_pc;
-        uint64_t low_pc;
-        uint64_t abstract_origin;
-        uint64_t specification;
 };
 
+typedef void (*DwarfInfoAttributeIterator) (uint64_t name, uint64_t value);
+
 
 struct dwarf2_info_iterator
 {
-        void (*start_cuh) (struct dwarf2_info_iterator *i, const struct dwarf2_info_cuh *, uint64_t);
-        void (*end_cuh) (struct dwarf2_info_iterator *i, const struct dwarf2_info_cuh *);
-        void (*end_children) (struct dwarf2_info_iterator *i, const struct dwarf2_info_cuh *);
-        void (*entry) (struct dwarf2_info_iterator *i, const struct dwarf2_info_cuh *,
-                       const struct dwarf2_info_entry *, uint64_t, bool);
+        void (*start_cuh) (struct dwarf2_info_iterator *i, 
+                           const struct dwarf2_info_cuh *cuh, 
+                           uint64_t offset);
+        void (*end_cuh) (struct dwarf2_info_iterator *i, 
+                         const struct dwarf2_info_cuh *cuh);
+        
+        DwarfInfoAttributeIterator (*start_entry) (struct dwarf2_info_iterator *i,
+                                                   const struct dwarf2_info_cuh *cuh,
+                                                   uint64_t tag,
+                                                   bool hasChildren,
+                                                   uint64_t offset);
+        // return true to read children, false to skip them.
+        bool (*end_entry) (struct dwarf2_info_iterator *i,
+                           const struct dwarf2_info_cuh *cuh,
+                           uint64_t tag,
+                           bool hasChildren);
 };
 
 
@@ -106,7 +112,8 @@
                                struct reader *reader1, struct reader *reader2);
 
 // -1 on failure.
-int64_t dwarf2_info_entry_get_name (const struct dwarf2_info_cuh *org_cuh, const struct dwarf2_info_entry *org_entry,
+int64_t dwarf2_info_entry_get_name (const struct dwarf2_info_cuh *org_cuh, 
+                                    const struct dwarf2_info_entry *org_entry,
                                     struct reader *reader1, struct reader *reader2);
 
 
